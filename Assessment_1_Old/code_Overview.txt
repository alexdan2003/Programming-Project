#define EXIT_WRONG_ARG_COUNT 1
#define EXIT_BAD_INPUT_FILE 2
#define EXIT_BAD_OUTPUT_FILE 3

Generic error messages, that when called upon will return a number. Not much to it other than that.

#define MAGIC_NUMBER_RAW_PGM 0x3550
#define MAGIC_NUMBER_ASCII_PGM 0x3250

Checker to see whether the magic number variable below has a valid number inside of it. Not obvious at first but with an understanding of the code
it makes sense.

#define MIN_IMAGE_DIMENSION 1
#define MAX_IMAGE_DIMENSION 65536

Minimum and maximum image dimensions for the pgm files, constants in the program.

#define MAX_COMMENT_LINE_LENGTH 128

Maximum comment length constant, used when reading in pgm files to ensure comment lines are not too long.

int main(int argc, char **argv)
        { /* main() */
        /* check for correct number of arguments */
        if (argc != 3)
                { /* wrong arg count */
                /* print an error message        */
                printf("Usage: %s input_file output_file\n", argv[0]);
                /* and return an error code	 */
                return EXIT_WRONG_ARG_COUNT;
                } /* wrong arg count */

Simple code to check that the amount of arguments given to the program is equal to 3. If this is not the case then the code will print an error message
with the code above returning a 1 as that is the error message it calls. Simple error handling here then overall.

unsigned char magic_number[2] = {'0','0'};
unsigned short *magic_Number = (unsigned short *) magic_number;

short is a data type within c tha size_t nBytesWritten = fprintf(outputFile, "P2\n%d %d\n%d\n", width, height, maxGray);

        /* check that dimensions wrote correctly */
        if (nBytesWritten < 0)
                { /* dimensional write failed    */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* dimensional write failed    */
t stands for short integer and usually has at least 16 bits. c 
Makes an unsigned char with two characters within it, both of them being 0s at the time of its definition. Below it is a typecast which changes the char 
to a unsigned short pointer, though I am not entirely sure about the second line.

/* we will store ONE comment             */
char *commentLine = NULL;

/* the logical width & height            */
/* note: cannot be negative              */
unsigned int width = 0, height = 0;

/* maximum gray value (assumed)          */
/* make it an integer for ease           */
unsigned int maxGray = 255;
 size_t nBytesWritten = fprintf(outputFile, "P2\n%d %d\n%d\n", width, height, maxGray);

        /* check that dimensions wrote correctly */
        if (nBytesWritten < 0)
                { /* dimensional write failed    */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* dimensional write failed    */

/* pointer to raw image data             */
unsigned char *imageData = NULL;

The above code is simply some variable setup of various types. Most of it seems like it will be used later, seems like a good place to make an end of a method for later.


FILE *inputFile = fopen(argv[1], "r");

        /* if it fails, return error code        */
        if (inputFile == NULL)
                return EXIT_BAD_INPUT_FILE;

Probably new module as new task. Reads in file using the second arg provided to the code. Then if the inputFile is not present it returns a generic error message, which in this case
leads to it returning the number 2.

/* read in the magic number              */
        magic_number[0] = getc(inputFile);
        magic_number[1] = getc(inputFile);

        /* sanity check on the magic number      */
        if (*magic_Number != MAGIC_NUMBER_ASCII_PGM)
                { /* failed magic number check   */
                /* be tidy: close the file       */
                fclose(inputFile);

                /* print an error message */
                printf("Error: Failed to read pgm image from file %s\n", argv[1]);
                /* and return                    */
                return EXIT_BAD_INPUT_FILE;
                } /* failed magic number check   */

After a successful read by the file it then reads in the magic number from the file. getc reads the next character from the file stream and returns it as a casted int. This happens twice
to give the program the magic number it needs. 
It then proceeds to check the magic number against the constant defined, which is a specific number. If it is not equal then it closes the file to be tidy and returns an error message using a constant 
and a print statement.

 int scanCount = fscanf(inputFile, " ");

        /* check for a comment line              */
        char nextChar = fgetc(inputFile);
        if (nextChar == '#')
                { /* comment line                */
                /* allocate buffer               */
                commentLine = (char *) malloc(MAX_COMMENT_LINE_LENGTH);
                /* fgets() reads a line          */
                /* capture return value          */
                char *commentString = fgets(commentLine, MAX_COMMENT_LINE_LENGTH, inputFile);
                /* NULL means failure            */
                if (commentString size_t nBytesWritten = fprintf(outputFile, "P2\n%d %d\n%d\n", width, height, maxGray);

        /* check that dimensions wrote correctly */
        if (nBytesWritten < 0)
                { /* dimensional write failed    */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* dimensional write failed    */
 == NULL)
                        { /* NULL comment read   */
                        /* free memory           */
                        free(commentLine);
                        /* close file            */
                        fclose(inputFile);

                        /* print an error message */
                        printf("Error: Failed to read pgm image from file %s\n", argv[1]);
                        /* and return            */
                        return EXIT_BAD_INPUT_FILE;
                        } /* NULL comment read   */
                } /* comment line */

The first line scanCount appears to be checking for any whitespace before the first actual character. After this has happened the fgetc gets the next character present and stores it in nextChar.
Once it is stored in nextChar it  size_t nBytesWritten = fprintf(outputFile, "P2\n%d %d\n%d\n", width, height, maxGray);

        /* check that dimensions wrote correctly */
        if (nBytesWritten < 0)
                { /* dimensional write failed    */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* dimensional write failed    */
checks to see whether this line is a comment line by seeing if it has a # on it. If this happens a large chunk of code will take place.

This next chunk begins by freeing the memory required for the maximum amount of characters in a comment line, using the constant given above. Once this memory has been freed it will then store the comment
using fgets within a pointer char called commentString, ensuring it does not go over the maximum comment length using the constant as a buffer. Afterwards if the comment line is empty it will free the 
memory and close the inputFile printing an error message and using the bad input file constant.

Otherwise it will continue on and it appears to use ungetc to pushback the stored # in nextChar to the file, where it can be read again if needed.

scanCount = fscanf(inputFile, " %u %u %u", &(width), &(height), &(maxGray));

        /* sanity checks on size & grays         */
        /* must read exactly three values        */
        if	(
                (scanCount != 3                         )	||
                (width  < MIN_IMAGE_DIMENSION   )	||
                (width  > MAX_IMAGE_DIMENSION   )	||
                (height < MIN_IMAGE_DIMENSION   )	||
￼￼
Share           (height > MAX_IMAGE_DIMENSION   )	||
                (maxGray        != 255          )
                )
                { /* failed size sanity check    */
                /* free up the memory            */
                free(commentLine);

                /* be tidy: close file pointer   */
                fclose(inputFile);

                /* print an error message */
                printf("Error: Failed to read pgm image from file %s\n", argv[1])
                /* and return                    */
                return EXIT_BAD_INPUT_FILE;
                } /* failed size sanity check    */

Begins using an fscanf function which reads in the width height and maxGray from the file as a %u which means unsigned integer. It then error checks this by seeing if there is indeed a value for each of these
then checking if the width, height and maxGray are within the valid range of values allowed within the program. If any of these fail then the code frees the memory from earlier to clear up after itself, closes the 
file and prints an error message whilst also using the bad input file constant. 

Potential good point to end one of the modules as the file has gathered all the information it appears to need for now. However may be incorrect and needs further thought.


long nImageBytes = width * height * sizeof(unsigned char);
        imageData = (unsigned char *) malloc(nImageBytes);

        /* sanity check for memory allocation    */
        if (imageData == NULL)
                { /* malloc failed */
                /* free up memory                */
                free(commentLine);

                /* close file pointer            */
                fclose(inputFile);
￼￼
                /* print an error message */
                printf("Error: Failed to read pgm image from file %s\n", argv[1]);
               	/* return error code             */
                return EXIT_BAD_INPUT_FILE;
                } /* malloc failed */

The next thing the code does is take the width, height and size of an unsigned character and * them together before storing them into a long integer. The value gathered by this is then reserved in memory by malloc
ensuring that there is room for the imageData within the memory.
Afterwards some testing is done to ensure it works correctly, as if imageData is equal to nothing it will clean up before sending an error message and using the bad input file constant.

for (unsigned char *nextGrayValue = imageData; nextGrayValue < imageData + nImageBytes; nextGrayValue++)
                { /* per gray value */
                /* read next value               */
                int grayValue = -1;
                int scanCount = fscanf(inputFile, " %u", &grayValue);

                /* sanity check                  */
                if ((scanCount != 1) || (grayValue < 0) || (grayValue > 255))
                        { /* fscanf failed */
                        /* free memory           */ size_t nBytesWritten = fprintf(outputFile, "P2\n%d %d\n%d\n", width, height, maxGray);

        /* check that dimensions wrote correctly */
        if (nBytesWritten < 0)
                { /* dimensional write failed    */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* dimensional write failed    */

                        free(commentLine);
                        free(imageData);

                        /* close file            */
                        fclose(inputFile);

                        /* print error message   */
                        printf("Error: Failed to read pgm image from file %s\n", argv[1]);
                        /* and return            */
                        return EXIT_BAD_INPUT_FILE;
                        } /* fscanf failed */

                /* set the pixel value           */
                *nextGrayValue = (unsigned char) grayValue;
                } /* per gray value */

	/* we're done with the file, so close it */
	fclose(inputFile);


The following code runs a complicated for loop. What it appears to be doing is setting up a count depending on the size of the imageData from earlier. While this count is smaller than imageData and ImageBytes the code below
it will run. This code below does the following.
Per gray value, which essentially means per runthrough of the for. The code is complicated here but essentially it means for every gray value, which is roughly every pixel it will go through and check what the intensity of the 
gray is with zero being one end of the spectrum and 256 being the other with the entire roster of grays being inbetween. It does this until all the gray values have been checked essentially reading all of them out of the file 
so that all the information needed on them is in the program.
Afterwards it simply does a simple check to ensure that the scanCOunt has found a gray value and that the gray value found is within the acceptable range of the program. If this happens it clears up and sends back an error
message using the constant bad input file.

This is another good possible splitting point for the program as all the information needed to read from the file has been taken and the file has been closed making it easy to then simply return all the information needed
from the module.


/* open a file for writing               */
        FILE *outputFile = fopen(argv[2], "w");

        /* check whether file opening worked     */
        if (outputFile == NULL)
                { /* NULL output file */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* NULL output file */

This code then handles the code for writing the output to a file. It begins with opening a file using the third argument provided as a write file. Afterwards it simply does some error checking ensuring that if the file 
doesn't work the code closes, freeing ther memory used and printing an error message using the bad output file constant.

 size_t nBytesWritten = fprintf(outputFile, "P2\n%d %d\n%d\n", width, height, maxGray);

        /* check that dimensions wrote correctly */
        if (nBytesWritten < 0)
                { /* dimensional write failed    */
                /* free memory                   */
                free(commentLine);
                free(imageData);

                /* print an error message        */
                printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                /* return an error code          */
                return EXIT_BAD_OUTPUT_FILE;
                } /* dimensional write failed    */

This code prints out the width, height and maxGray to the file , whilst also gathering the size of the amount of characters written. After this it checks that there have been bytes written to the file and in the case that 
there is no it cleans up the program before printing an error message using a bad output file.
                
for (unsigned char *nextGrayValue = imageData; nextGrayValue < imageData + nImageBytes; nextGrayValue++)
                { /* per gray value */
                /* get next char's column        */
                int nextCol = (nextGrayValue - imageData + 1) % width;

                /* write the entry & whitespace  */
                nBytesWritten = fprintf(outputFile, "%d%c", *nextGrayValue, (nextCol ? ' ' : '\n') );

                /* sanity check on write         */
                if (nBytesWritten < 0)
                        { /* data write failed   */
                        /* free memory           */
                        free(commentLine);
                        free(imageData);

                        /* print error message   */
                        printf("Error: Failed to write pgm image to file %s\n", argv[2]);       

                        /* return an error code  */
                        return EXIT_BAD_OUTPUT_FILE;
                        } /* data write failed   */
                } /* per gray value */

        /* at this point, we are done and can exit with a success code */
        return EXIT_NO_ERRORS;
        } /* main() */
        
This code goes through all the gray values, which are essentially pixels, this code is very similar to the same part from the read part of the code. It first works out the next column for the gray value and then 
prints the correct gray value in the correct column for all of the gray values. If there is nothing written however then the code will clean up after itself before outputting an error based off of the constant bad 
output file.


